services:
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: graphsfm-backend
    expose:
      - "5000"  # expose to containers internal network
    restart: always
    environment:
      - PORT=500
      - NODE_ENV=production
      - SERVICE_NAME=backend
    env_file:
      - .env
      - ./backend/.env # includes backend specific variables, such as api credentials and token secrets

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    container_name: graphsfm-frontend
    expose:
      - "3000" # expose to containers internal network
    restart: always
    environment:
      - PORT=3000
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:5000/api#
      - SERVICE_NAME=frontend
    env_file:
      - ./frontend/.env

  cron:
    build:
      context: .
      dockerfile: ./cron/Dockerfile
    container_name: graphsfm-cron
    restart: always
    working_dir: /app
    environment:
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production
      - SERVICE_NAME=scraper
    env_file:
      - ./backend/.env
    depends_on:
      - backend

  websocket:
    build:
      context: .
      dockerfile: ./websocket/Dockerfile
    container_name: graphsfm-websocket
    restart: always
    working_dir: /app
    ports:
      - "4000:4000"
    environment:
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production
      - SERVICE_NAME=websocket
    env_file:
      - ./backend/.env
    depends_on:
      - redis

  nginx:
    image: nginx:alpine
    container_name: graphsfm-nginx
    ports:
      - "5004:80"  # Expose port 5004 to host
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend

  redis: # url: redis://redis:6379
    image: redis:alpine  # Lightweight Redis image
    container_name: graphsfm-redis
    restart: always
    volumes:
      - redis_data:/data  # Persistent storage for Redis data

volumes:
  redis_data: